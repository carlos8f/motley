#!/usr/bin/env node
var cmd = require('commander')
  , assert = require('assert')
  , fs = require('fs')
  , path = require('path')
  , ncp = require('ncp')
  , idgen = require('idgen')
  , spawn = require('child_process').spawn
  , gist = require('gist-cli')
  , rimraf = require('rimraf')
  , mkdirp = require('mkdirp')

cmd
  .usage('motley-init [path/to/project]')
  .version(require('../package.json').version)
  .option('--gist', 'initialize a new motley gist')
  .option('--public', 'do not make a secret gist')
  .option('--open', 'open the new gist in browser')
  .description('initialize a new motley project')

cmd.parse(process.argv);

var dest = path.resolve(cmd.args[0] || '.');
var name = path.basename(dest);
var src;

var parts = [__dirname, '..', 'init'];
if (cmd.gist) {
  var tmp = path.join(require('os').tmpDir(), 'motley-tmp-' + idgen());
  parts[2] += '-gist';
  src = path.resolve.apply(path, parts);
  var args = [];
  args.push(cmd.public ? '--no-private' : '--private');
  args.push('--description', name);
  args.push(cmd.open ? '--open' : '--no-open');
  fs.readdir(src, function (err, files) {
    assert.ifError(err);
    args = args.concat(files);
    // the chdir is so gist-cli doesn't take absolute paths and create really
    // long "dashy" gist filenames from them.
    var oldcwd = process.cwd();
    process.chdir(src);
    gist(args, function (err, u) {
      process.chdir(oldcwd);
      assert.ifError(err);
      var id = u.match(/https:\/\/gist\.github\.com\/([^\/]+)\/([0-9a-f]+)/)[2];
      var git = spawn('git', ['clone', '--quiet', 'git@gist.github.com:/' + id + '.git', tmp])
        .once('exit', function (code) {
          assert.equal(code, 0);
          src = tmp;
          copy();
        });
    });
  });
}
else {
  src = path.resolve.apply(path, parts);
  copy();
}

function copy () {
  mkdirp(dest, function (err) {
    assert.ifError(err);
    ncp(src, dest, {clobber: false, stopOnErr: true}, function (err) {
      assert.ifError(err);
      if (cmd.gist) {
        // delete the tmp files
        rimraf(tmp, function (err) {
          assert.ifError(err);
          addId();
        });
      }
      else addId();
      function addId () {
        var id = idgen();
        fs.readFile(path.join(dest, 'motley.yml'), {encoding: 'utf8'}, function (err, data) {
          assert.ifError(err);
          data = 'id: ' + id + '\n' + data;
          fs.writeFile(path.join(dest, 'motley.yml'), data, assert.ifError);
        });
      }
    });
  });
}
